#!/bin/bash

# A lightweight CLI for FFmpeg utilities


RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
NC='\033[0m' 

show_help() {
  echo -e "${CYAN}Usage:${NC}"
  echo "  cmpress [command] [options]"
  echo
  echo -e "${CYAN}Commands:${NC}"
  echo -e "  ${GREEN}compress-video${NC}   Compress a video while maintaining quality"
  echo "                   Arguments: <input> <output> [quality]"
  echo "                   - input: Path to the input video file."
  echo "                   - output: Path to the compressed video file."
  echo "                   - quality (optional): CRF value for quality control. Default is 23"
  echo
  echo -e "  ${GREEN}resize-image${NC}     Resize and compress an image"
  echo "                   Arguments: <input> <output> <width>"
  echo "                   - input: Path to the input image file."
  echo "                   - output: Path to the resized and compressed image."
  echo "                   - width: Desired width for the resized image."
  echo
  echo -e "  ${GREEN}gif-to-mp4${NC}       Convert an animated GIF to an MP4"
  echo "                   Arguments: <input> <output>"
  echo "                   - input: Path to the input GIF file."
  echo "                   - output: Path to the output MP4 file."
  echo
  echo -e "${CYAN}Examples:${NC}"
  echo -e "  ${GREEN}cmpress${NC} compress-video input.mp4 output.mp4"
  echo -e "  ${GREEN}cmpress${NC} compress-video input.mp4 output.mp4 18"
  echo -e "  ${GREEN}cmpress${NC} resize-image input.png output.jpg 1280"
  echo -e "  ${GREEN}cmpress${NC} gif-to-mp4 input.gif output.mp4"
  echo
  echo -e "${CYAN}Note${NC}: ${GREEN}cmpress${NC} requires FFmpeg to be installed on your system"
}

compress_video() {
  input=$1
  output=$2
  quality=${3:-23} # default CRF value is 23

  if [[ -z "$input" || -z "$output" ]]; then
    echo -e "${RED}Error: Missing input or output file.${NC}"
    echo "Usage: cmpress compress-video <input> <output> [quality]"
    exit 1
  fi

  if ! command -v ffprobe &>/dev/null; then
    echo -e "${RED}Error: ffprobe is not installed. Please install it to use this util.${NC}"
    exit 1
  fi

  # compress the video
  echo -e "${CYAN}Compressing video...${NC}"
  ffmpeg -i "$input" -vcodec libx264 -crf "$quality" "$output" >/dev/null 2>&1

  if [[ $? -eq 0 ]]; then
    echo -e "${GREEN}Video compressed successfully!${NC}"
    echo

    compression_start=$(date +%s.%N)

    # get file size, resolution, and duration of the input video
    input_size=$(stat --printf="%s" "$input" 2>/dev/null || stat -f%z "$input") # size in bytes
    input_size_mb=$(echo "scale=2; $input_size / 1024 / 1024" | bc) # convert to MB
    input_width=$(ffprobe -i "$input" -v quiet -select_streams v:0 -show_entries stream=width -of csv=p=0)
    input_height=$(ffprobe -i "$input" -v quiet -select_streams v:0 -show_entries stream=height -of csv=p=0)
    input_resolution="${input_width}x${input_height}"
    input_format=$(basename "$input" | awk -F. '{print $NF}' | tr '[:lower:]' '[:upper:]')

    # get file size, resolution, and duration of the output video
    output_size=$(stat --printf="%s" "$output" 2>/dev/null || stat -f%z "$output") # size in bytes
    output_size_mb=$(echo "scale=2; $output_size / 1024 / 1024" | bc) # convert to MB
    output_width=$(ffprobe -i "$output" -v quiet -select_streams v:0 -show_entries stream=width -of csv=p=0)
    output_height=$(ffprobe -i "$output" -v quiet -select_streams v:0 -show_entries stream=height -of csv=p=0)
    output_resolution="${output_width}x${output_height}"

    compression_end=$(date +%s.%N)
    compression_time=$(printf "%.1f" $(echo "$compression_end - $compression_start" | bc))

    # display video information
    echo -e "${CYAN}Input video:${NC}"
    echo -e "  Size: ${GREEN}${input_size_mb} MB${NC}"
    echo -e "  Resolution: ${GREEN}${input_resolution}${NC}"
    echo -e "  Video format: ${GREEN}${input_format}${NC}"
    echo 
    echo -e "${CYAN}Output video:${NC}"
    echo -e "  Size reduced: ${GREEN}${output_size_mb} MB${NC} (reduced by $(echo "scale=2; 100 * ($input_size - $output_size) / $input_size" | bc)%)"
    echo -e "  Time taken: ${GREEN}${compression_time}s${NC}"
    echo -e "  Output folder: ${CYAN}$output${NC}"

  else
    echo -e "${RED}Error: Video compression failed.${NC}"
    exit 1
  fi
}

resize_image() {
  input=$1
  output=$2
  width=$3

  if [[ -z "$input" || -z "$output" || -z "$width" ]]; then
    echo -e "${RED}Error: Missing input, output, or width.${NC}"
    echo "Usage: cmpress resize-image <input> <output> <width>"
    exit 1
  fi

  echo -e "${CYAN}Resizing and compressing image...${NC}"
  ffmpeg -i "$input" -vf scale="$width":-1 "$output"
  echo -e "${GREEN}Image resized successfully! Output: $output${NC}"
}

gif_to_mp4() {
  input=$1
  output=$2

  if [[ -z "$input" || -z "$output" ]]; then
    echo -e "${RED}Error: Missing input or output file.${NC}"
    echo "Usage: cmpress gif-to-mp4 <input> <output>"
    exit 1
  fi

  echo -e "${CYAN}Converting GIF to MP4...${NC}"
  ffmpeg -i "$input" -movflags faststart -pix_fmt yuv420p "$output"
  echo -e "${GREEN}GIF converted to MP4 successfully! Output: $output${NC}"
}

# parse commands
command=$1
shift

case "$command" in
  compress-video)
    compress_video "$@"
    ;;
  resize-image)
    resize_image "$@"
    ;;
  gif-to-mp4)
    gif_to_mp4 "$@"
    ;;
  --help | -h)
    show_help
    ;;
  *)
    echo -e "${RED}Unknown command: $command${NC}"
    show_help
    ;;
esac