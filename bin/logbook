#!/bin/bash

# logbook: a utility to create and manage logbook entries for a specific project.

RESET="\033[0m"
BOLD="\033[1m"
YELLOW="\033[33m"
GREEN="\033[32m"

LOGDIR=".logbook"
LOGFILE="$(date +'%Y-%m-%d').md"
PROJECT_DIR="$(pwd)"
EDITOR_OVERRIDE=""

# define the path to the .logbookrc file relative to the script location
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_FILE="$SCRIPT_DIR/../.logbookrc"

# error handling helper
_err() {
  echo -e "$0:" "$@" >&2
  exit 1
}

# load configuration from .logbookrc
load_config() {
  if [ -f "$CONFIG_FILE" ]; then
    echo "Loading configuration from $CONFIG_FILE"
    set -a # export variables for current shell
    source "$CONFIG_FILE"
    set +a
  else
    echo "No .logbookrc configuration file found in $CONFIG_FILE. Using defaults."
  fi
}

# check the editor to use
_default_editor() {
  if [ -n "$EDITOR_OVERRIDE" ]; then
    echo "$EDITOR_OVERRIDE"
  elif [ -n "$EDITOR" ]; then
    echo "$EDITOR"
  else
    command -v vim >/dev/null && EDITOR=vim
    [ -z "$EDITOR" ] && command -v nano >/dev/null && EDITOR=nano
    [ -z "$EDITOR" ] && _err "No suitable editor found. Set the EDITOR environment variable."
    echo "$EDITOR"
  fi
}

# create or open a log file
create_log_entry() {
  cd "$PROJECT_DIR" || _err "Error: directory $PROJECT_DIR does not exist."
  
  if [ ! -d "$LOGDIR" ]; then
    echo "Creating log directory: $LOGDIR"
    mkdir -p "$LOGDIR"
  fi
  
  LOGFILE_PATH="$LOGDIR/$LOGFILE"
  if [ ! -f "$LOGFILE_PATH" ]; then
    echo "Log file created: $LOGFILE_PATH"
  else
    echo "Log file for today already exists: $LOGFILE_PATH"
  fi
  
  EDITOR=$(_default_editor)
  exec $EDITOR "$LOGFILE_PATH"
}

set_project_directory() {
  echo -n "Enter the project directory path: "
  read -r new_project_dir
  if [ -d "$new_project_dir" ]; then
    PROJECT_DIR="$new_project_dir"
    echo "Project directory set to: $PROJECT_DIR"
  else
    echo "Invalid directory. Please try again."
  fi
}

set_default_editor() {
  echo -n "Enter the editor you want to use (e.g., vim, nano, code): "
  read -r new_editor
  if command -v "$new_editor" >/dev/null 2>&1; then
    EDITOR_OVERRIDE="$new_editor"
    echo "Default editor set to: $EDITOR_OVERRIDE"
  else
    echo "Editor not found. Please try again."
  fi
}

# view existing logs
view_logs() {
  LOGDIR_PATH="$PROJECT_DIR/$LOGDIR"

  if [ ! -d "$LOGDIR_PATH" ]; then
    echo "No log directory found in $PROJECT_DIR."
    read -n1 -rsp "Press any key to return to the menu..."
    return
  fi

  LOG_FILES=("$LOGDIR_PATH"/*.md)

  if [ ${#LOG_FILES[@]} -eq 1 ] && [[ "${LOG_FILES[0]}" == "$LOGDIR_PATH/*.md" ]]; then
    echo "No log files found in $LOGDIR_PATH."
    read -n1 -rsp "Press any key to return to the menu..."
    return
  fi

  echo "Available logs:"
  for log in "$LOGDIR_PATH"/*.md; do
    echo "  - $(basename "$log")"
  done

  # pause to let the user view logs
  read -n1 -rsp "Press any key to return to the menu..."
}

# show help menu
show_help() {
  echo -e "${BOLD}usage:${RESET} logbook [options]\n"
  echo -e "${BOLD}options:${RESET}"
  echo -e "  ${YELLOW}--help${RESET}             Print help manual and exit."
  echo -e "  ${YELLOW}--project <dir>${RESET}    Specify project directory (default: current directory)."
  echo -e "  ${YELLOW}--editor <editor>${RESET}  Specify the editor to use (default: vim).\n"
  echo -e "${BOLD}example:${RESET}"
  echo -e "  ${GREEN}logbook${RESET} --project /path/to/project"
  echo -e "  ${GREEN}logbook${RESET} --editor nano"
}

main_menu() {
  local options=(
    "Create new log entry" 
    "Set project directory" 
    "Set default editor" 
    "View existing logs"
    "Help"
    "Exit"
  )

  local num_options=${#options[@]}
  local current_selection=0

  while true; do
    clear
    echo -e "logbook main menu:\n"

    # display options with the current selection highlighted
    for i in "${!options[@]}"; do
      if [ "$i" -eq "$current_selection" ]; then
        echo -e "  ${GREEN}> ${options[$i]}${RESET}"
      else
        echo "    ${options[$i]}"
      fi
    done

    # read user input
    read -rsn1 input # read single character silently
    if [[ "$input" == $'\033' ]]; then
      read -rsn2 input # read the next two characters for arrow keys
    fi

    case "$input" in
      "[A") # up arrow
        ((current_selection--))
        if [ "$current_selection" -lt 0 ]; then
          current_selection=$((num_options - 1))
        fi
        ;;
      "[B") # down arrow
        ((current_selection++))
        if [ "$current_selection" -ge "$num_options" ]; then
          current_selection=0
        fi
        ;;
      "") # enter key
        case "$current_selection" in
          0) create_log_entry ;;
          1) set_project_directory ;;
          2) set_default_editor ;;
          3) view_logs ;;
          4) show_help; read -n1 -rsp "Press any key to return to the menu..." ;;
          5) exit 0 ;;
        esac
        ;;
      *) ;; # ignore other inputs
    esac
  done
}


load_config
main_menu